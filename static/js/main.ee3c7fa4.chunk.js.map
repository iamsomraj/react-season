{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["getSeason","lat","month","SUMMER","WINTER","text","icon","SeasonDisplay","props","Date","getMonth","iconName","season","className","Spinner","message","defaultProps","App","state","error","componentDidMount","navigator","geolocation","getCurrentPosition","success","setState","Math","round","coords","latitude","renderContent","this","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAY,SAACC,EAAKC,GACtB,IAAMC,EAAS,yBACTC,EAAS,sBAGf,OAAIF,EAAQ,GAAKA,EAAQ,EAChB,CACLG,KAAMJ,EAAM,EAAIE,EAASC,EACzBE,KAAML,EAAM,EALG,MACA,aAOZ,CACLI,KAAMJ,EAAM,EAAIG,EAASD,EACzBG,KAAML,EAAM,EATK,YADA,SA4BNM,EAdO,SAAAC,GACpB,IAAMH,EAAOL,EAAUQ,EAAMP,KAAK,IAAIQ,MAAOC,YAAYL,KACnDM,EAAWX,EAAUQ,EAAMP,KAAK,IAAIQ,MAAOC,YAAYJ,KACvDM,EAAkB,2BAATP,EAAoC,SAAW,SAE9D,OACE,yBAAKQ,UAAS,yBAAoBD,IAChC,uBAAGC,UAAS,4BAAuBF,EAAvB,WACZ,4BAAKN,GACL,uBAAGQ,UAAS,6BAAwBF,EAAxB,aC3BZG,EAAU,SAACN,GACf,OACE,yBAAKK,UAAU,oBACf,yBAAKA,UAAU,kBAAkBL,EAAMO,WAK3CD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCTTG,E,2MACJC,MAAQ,CACNjB,IAAK,KACLkB,MAAO,I,EAGTC,kBAAoB,WAClBC,UAAUC,YAAYC,oBACpB,SAAAC,GACE,EAAKC,SAAS,CAAExB,IAAKyB,KAAKC,MAAMH,EAAQI,OAAOC,eAEjD,SAAAV,GACE,EAAKM,SAAS,CAAEN,MAAOA,EAAMJ,c,EAKnCe,cAAgB,WACd,OAAI,EAAKZ,MAAMjB,MAAQ,EAAKiB,MAAMC,MAE9B,6BACE,kBAAC,EAAD,CAAelB,IAAK,EAAKiB,MAAMjB,QAGzB,EAAKiB,MAAMjB,KAAO,EAAKiB,MAAMC,MAErC,6BACE,uCAAa,EAAKD,MAAMC,QAKvB,kBAAC,EAAD,CAASJ,QAAQ,sC,wEAIxB,OAAO,yBAAKF,UAAU,OAAOkB,KAAKD,qB,GApCpBE,aAwClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.ee3c7fa4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonDisplay.css';\r\n\r\nconst getSeason = (lat, month) => {\r\n  const SUMMER = \"Let's, hit the beach! \";\r\n  const WINTER = \"Burr, it's chilly! \";\r\n  const SUMMERICON = 'sun';\r\n  const WINTERICON = 'snowflake';\r\n  if (month > 2 && month < 9) {\r\n    return {\r\n      text: lat > 0 ? SUMMER : WINTER,\r\n      icon: lat > 0 ? SUMMERICON : WINTERICON\r\n    };\r\n  }\r\n  return {\r\n    text: lat > 0 ? WINTER : SUMMER,\r\n    icon: lat > 0 ? WINTERICON : SUMMERICON\r\n  };\r\n};\r\n\r\nconst SeasonDisplay = props => {\r\n  const text = getSeason(props.lat, new Date().getMonth()).text;\r\n  const iconName = getSeason(props.lat, new Date().getMonth()).icon;\r\n  const season = text === \"Let's, hit the beach! \" ? 'summer' : 'winter';\r\n\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`icon-left massive ${iconName} icon`}></i>\r\n      <h1>{text}</h1>\r\n      <i className={`icon-right massive ${iconName} icon`}></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n    <div className=\"ui text loader\">{props.message}</div>\r\n  </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: 'Loading...'\r\n}\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\nclass App extends Component {\n  state = {\n    lat: null,\n    error: ''\n  };\n\n  componentDidMount = () => {\n    navigator.geolocation.getCurrentPosition(\n      success => {\n        this.setState({ lat: Math.round(success.coords.latitude) });\n      },\n      error => {\n        this.setState({ error: error.message });\n      }\n    );\n  };\n\n  renderContent = () => {\n    if (this.state.lat && !this.state.error) {\n      return (\n        <div>\n          <SeasonDisplay lat={this.state.lat} />\n        </div>\n      );\n    } else if (!this.state.lat && this.state.error) {\n      return (\n        <div>\n          <h1>Error : {this.state.error}</h1>\n        </div>\n      );\n    }\n\n    return <Spinner message=\"Please, Accept Location Request!\" />;\n  };\n\n  render() {\n    return <div className=\"App\">{this.renderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}